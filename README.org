* Usage

** Generate init.el

Use =make= or eval following lisp code. Move to the end of the expression, and press <kbd>Ctrl-X Ctrl-E</kbd>.

#+begin_example
  (progn
    (let* ((dir (concat (file-name-directory (buffer-file-name))))
           (outfile (concat dir "init.el"))
           (generated-autoload-file (concat dir "site-lisp/my-autoloads.el")))
      (update-directory-autoloads (concat dir "site-lisp"))
      (org-babel-tangle-file (buffer-file-name) outfile)
      (byte-compile-file outfile)))
#+end_example

* Startup

Remove annoying UI

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
#+end_src

* My Config

** Dependencies

#+begin_src emacs-lisp
  (defvar my-site-lisp (expand-file-name "site-lisp/" user-emacs-directory)
    ".emacs.d/site-lisp")
  
  (setq load-path (append (list my-site-lisp) load-path))
  
  ;; load autoloads if generated, otherwise load all files in site-lisp
  (let ((autoloads (concat my-site-lisp "my-autoloads.el")))
    (if (file-exists-p autoloads)
        (progn
          (require 'my-mode)
          (require 'module)
          (require 'my-autoloads))
      (mapc (lambda (file)
              (require (intern (file-name-sans-extension
                                (file-name-nondirectory file)))))
            (file-expand-wildcards (concat my-site-lisp "*.el")))))
  
  ;; Require Macros for byte compile
  (eval-when-compile
    (progn (require 'module)))
#+end_src

** Custom/secrets files

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)
  (load my-custom-readonly-file t)
  (load my-secrets-file t)
#+end_src

** Basic

#+begin_src emacs-lisp
  (custom-set-variables
   '(default-major-mode (quote text-mode) t)
  
   '(enable-recursive-minibuffers t)
   '(minibuffer-depth-indicate-mode t))
#+end_src

** File system

#+begin_src emacs-lisp
  (custom-set-variables
   '(delete-by-moving-to-trash t)
   '(tramp-default-method-alist (quote (("\\`localhost\\'" "\\`root\\'" "sudo")))))
#+end_src

** Clipboard

#+begin_src emacs-lisp
  (custom-set-variables
   '(mouse-yank-at-point t)
   '(x-select-enable-clipboard t))
#+end_src

** Encoding

#+begin_src emacs-lisp
  (custom-set-variables
   '(current-language-environment "UTF-8")
   '(locale-coding-system 'utf-8))
  
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src

** Enable Commands

#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
(put 'scroll-left 'disabled nil)
(put 'scroll-right 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
#+end_src

** Safe Variables

#+begin_src emacs-lisp
  (custom-set-variables
   '(safe-local-variable-values '((encoding . utf-8)
                                  (outline-minor-mode . t))))
#+end_src

** Aliases

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(fset 'man 'woman)
(defalias 'save-pwd 'xsteve-save-current-directory)
(defalias 'qrr 'query-replace-regexp)
(defalias 'rr 'replace-regexp)
(defalias 'rb 'revert-buffer-no-confirm)
(defalias 'occ 'occur)
(defalias 'mocc 'multi-occur)
(defalias 'moccr 'multi-occur-in-matching-buffers)
(defalias 'aa 'anything-apropos)
(defalias 'wc 'whitespace-cleanup)
(defalias 'flb 'add-file-local-variable)
(defalias 'fll 'add-file-local-variable-prop-line)
(defalias 'fl 'add-file-local-variable-prop-line)
(defalias 'dl 'add-dir-local-variable)
(defalias 'ack 'agap)
(defalias 'sudo 'find-alternative-file-with-sudo)
(defalias 'af 'auto-fill-mode)
#+end_src

* ELPA

Load package on demand

#+begin_src emacs-lisp
  ;; @purcell https://github.com/purcell/emacs.d/blob/master/init-elpa.el
  (defun require-package (package &optional min-version no-refresh)
    "Install given PACKAGE, optionally requiring MIN-VERSION.
  If NO-REFRESH is non-nil, the available package lists will not be
  re-downloaded in order to locate PACKAGE."
    (if (package-installed-p package min-version)
        t
      (if (or (assoc package package-archive-contents) no-refresh)
          (package-install package)
        (progn
          (package-refresh-contents)
          (require-package package min-version t)))))
  
  (package-initialize)
  
  (setq package-archives
        '(("org" . "http://orgmode.org/elpa/")
          ("melpa" . "http://melpa.milkbox.net/packages/")))
#+end_src

* Modules

Disable module by adding it to =module-black-list=.

#+begin_src emacs-lisp
;; (custom-set-variables
;;   '(module-black-list '(tex r delete-hacks)))
#+end_src

** char-motion

#+begin_src emacs-lisp
  (define-module char-motion
    "Move by char"

    (custom-set-variables
     '(iy-go-to-char-key-backward ?:))
  
    ;; Save binding M-m for iy-go-to-char
    (defun back-to-indentation-or-beginning ()
      (interactive)
      (if (= (point) (save-excursion (back-to-indentation) (point)))
          (beginning-of-line)
        (back-to-indentation)))
  
    (require-package 'iy-go-to-char)
  
    (defun zap-back-to-char (arg char)
      (interactive "p\ncZap back to char: ")
      (zap-to-char (- arg) char))
  
    (defun zap-back-up-to-char (arg char)
      (interactive "p\ncZap back up to char: ")
      (zap-up-to-char (- arg) char))
  
    (global-set-key "\C-z" 'iy-go-to-char)
    (global-set-key (kbd "M-m") 'iy-go-to-char)
    (global-set-key (kbd "M-M") 'iy-go-to-char-backward)
    (global-set-key "\C-Z" 'iy-go-to-char-backward)
  
    (global-set-key (kbd "M-Z") 'zap-back-up-to-char)
  
    (define-key my-keymap "d" 'zap-up-to-char)
    (define-key my-keymap "D" 'zap-back-up-to-char)
  
    (global-set-key "\C-a" 'back-to-indentation))
#+end_src

** ido

#+begin_src emacs-lisp
  (define-module ido
    "Enable ido globally, and use it everywhere"
    
    (custom-set-variables
     '(ido-enable-regexp nil)
     '(ido-enable-flex-matching t)
     '(ido-everywhere t)
     '(ido-read-file-name-as-directory-commands nil)
     '(ido-use-filename-at-point nil))
  
    (require-package 'ido-hacks)
    (require-package 'ido-complete-space-or-hyphen)
  
    (ido-mode +1)
    (ido-load-history)
  
    (ido-complete-space-or-hyphen-enable)
    (require 'ido-hacks)
    (ido-hacks-mode +1)
  
    (defun init--ido-setup ()
      (define-key ido-completion-map (kbd "M-m") 'ido-merge-work-directories)
      (define-key ido-completion-map "\C-c" 'ido-toggle-case))
  
    (add-hook 'ido-setup-hook 'init--ido-setup))
#+end_src

** magit

#+begin_src emacs-lisp
  (define-module magit
    "Git GUI for Emacs"
  
    (custom-set-variables
     '(magit-process-popup-time 60)
     '(magit-repo-dirs (list my-codebase-dir))
     '(magit-repo-dirs-depth 1))
  
    (require-package 'magit)
  
    (defun magit-toggle-whitespace ()
      (interactive)
      (if (member "-w" magit-diff-options)
          (magit-observe-whitespace)
        (magit-ignore-whitespace)))
  
    (defun magit-ignore-whitespace ()
      (interactive)
      (add-to-list 'magit-diff-options "-w")
      (magit-refresh))
  
    (defun magit-observe-whitespace ()
      (interactive)
      (setq magit-diff-options (remove "-w" magit-diff-options))
      (magit-refresh))
  
    (defun init--magit-mode ()
      (define-key magit-mode-map (kbd "W") 'magit-toggle-whitespace))
  
    (defun init--magit-log-edit-mode ()
      (flyspell-mode 1)
      (auto-fill-mode t)
      (setq fill-column 72))
  
    (add-hook 'magit-mode-hook 'init--magit-mode)
    (add-hook 'magit-log-edit-mode-hook 'init--magit-log-edit-mode)
  
    (global-set-key [f12] 'magit-status))
#+end_src
