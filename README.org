* Usage

** Generate init.el

Use =make= or eval following lisp code. Move to the end of the expression, and press <kbd>Ctrl-X Ctrl-E</kbd>.

#+BEGIN_EXAMPLE
  (progn
    (let* ((dir (concat (file-name-directory (buffer-file-name))))
           (outfile (concat dir "init.el"))
           (generated-autoload-file (concat dir "site-lisp/my-loaddefs.el")))
      (update-directory-autoloads (concat dir "site-lisp"))
      (org-babel-tangle-file (buffer-file-name) outfile)
      (byte-compile-file outfile)))
#+END_EXAMPLE

* Startup

Remove annoying UI

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
#+END_SRC

* My Config

** Dependencies

#+BEGIN_SRC emacs-lisp
    (defvar my-site-lisp-dir (expand-file-name "site-lisp/" user-emacs-directory)
      ".emacs.d/site-lisp")
    (defvar my-vendor-dir (expand-file-name "vendor/" user-emacs-directory)
      ".emacs.d/vendor")
    
    (setq load-path (cons my-site-lisp-dir load-path))
    
    ;; load loaddefs if generated, otherwise load all files in site-lisp
    (let ((loaddefs (concat my-site-lisp-dir "my-loaddefs.el")))
      (if (file-exists-p loaddefs)
          (progn
            (require 'dash)
            (require 'my-mode)
            (require 'module)
            (require 'my-loaddefs))
        (mapc (lambda (file)
                (require (intern (file-name-sans-extension
                                  (file-name-nondirectory it)))))
              (file-expand-wildcards (concat my-site-lisp-dir "*.el")))))
    
    ;; Require Macros for byte compile
    (eval-when-compile
      (progn (require 'dash)
             (require 'module)))
#+END_SRC

** Custom/secrets files

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)
  (load my-custom-readonly-file t)
  (load my-secrets-file t)
#+END_SRC

** Basic

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(default-major-mode (quote text-mode) t)
  
   '(enable-recursive-minibuffers t)
   '(minibuffer-depth-indicate-mode t))
#+END_SRC

** File system

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(delete-by-moving-to-trash t)
   '(tramp-default-method-alist (quote (("\\`localhost\\'" "\\`root\\'" "sudo")))))
#+END_SRC

** Clipboard

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(mouse-yank-at-point t)
   '(x-select-enable-clipboard t))
#+END_SRC

** Encoding

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(current-language-environment "UTF-8")
   '(locale-coding-system 'utf-8))
  
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

** Enable Commands

#+BEGIN_SRC emacs-lisp
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
(put 'scroll-left 'disabled nil)
(put 'scroll-right 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
#+END_SRC

** Safe Variables

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(safe-local-variable-values '((encoding . utf-8)
                                  (outline-minor-mode . t))))
#+END_SRC

** Aliases

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(fset 'man 'woman)
(defalias 'save-pwd 'xsteve-save-current-directory)
(defalias 'qrr 'query-replace-regexp)
(defalias 'rr 'replace-regexp)
(defalias 'rb 'revert-buffer-no-confirm)
(defalias 'occ 'occur)
(defalias 'mocc 'multi-occur)
(defalias 'moccr 'multi-occur-in-matching-buffers)
(defalias 'aa 'anything-apropos)
(defalias 'wc 'whitespace-cleanup)
(defalias 'flb 'add-file-local-variable)
(defalias 'fll 'add-file-local-variable-prop-line)
(defalias 'fl 'add-file-local-variable-prop-line)
(defalias 'dl 'add-dir-local-variable)
(defalias 'ack 'agap)
(defalias 'sudo 'find-alternative-file-with-sudo)
(defalias 'af 'auto-fill-mode)
#+END_SRC

* ELPA

Load package on demand

#+BEGIN_SRC emacs-lisp
  ;; @purcell https://github.com/purcell/emacs.d/blob/master/init-elpa.el
  (defun require-package (package &optional min-version no-refresh)
    "Install given PACKAGE, optionally requiring MIN-VERSION.
  If NO-REFRESH is non-nil, the available package lists will not be
  re-downloaded in order to locate PACKAGE."
    (if (package-installed-p package min-version)
        t
      (if (or (assoc package package-archive-contents) no-refresh)
          (package-install package)
        (progn
          (package-refresh-contents)
          (require-package package min-version t)))))
  
  (package-initialize)
  
  (setq package-archives
        '(("melpa" . "http://melpa.milkbox.net/packages/")))
#+END_SRC

* Modules

Disable module by adding it to =module-black-list=.

#+BEGIN_SRC emacs-lisp
;; Example
;; (custom-set-variables
;;   '(module-black-list '(tex r delete-keys-hacks)))
#+END_SRC

** delete-keys-hacks

Use <kbd>M-r</kbd> to delete word backward, <kbd>C-h</kbd> to delete char backword.

To get help, use <kbd>C-H</kbd> or <kbd>F1</kbd> instead.

This is an opinioned config, disable it by adding it to =module-black-list=.

#+BEGIN_SRC emacs-lisp
(define-module delete-keys-hacks
  "Translate C-h and M-r to delete char and word backward"
  (define-key key-translation-map [?\C-h] [?\C-?])
  (define-key key-translation-map [?\M-r] [?\C-\M-?]))
#+END_SRC

** char-motion

#+BEGIN_SRC emacs-lisp
  (define-module char-motion
    "Move by char"

    (custom-set-variables
     '(iy-go-to-char-key-backward ?:))
  
    ;; Save binding M-m for iy-go-to-char
    (defun back-to-indentation-or-beginning ()
      (interactive)
      (if (= (point) (save-excursion (back-to-indentation) (point)))
          (beginning-of-line)
        (back-to-indentation)))
  
    (require-package 'iy-go-to-char)
  
    (defun zap-back-to-char (arg char)
      (interactive "p\ncZap back to char: ")
      (zap-to-char (- arg) char))
  
    (defun zap-back-up-to-char (arg char)
      (interactive "p\ncZap back up to char: ")
      (zap-up-to-char (- arg) char))
  
    (global-set-key "\C-z" 'iy-go-to-char)
    (global-set-key (kbd "M-m") 'iy-go-to-char)
    (global-set-key (kbd "M-M") 'iy-go-to-char-backward)
    (global-set-key "\C-Z" 'iy-go-to-char-backward)
  
    (global-set-key (kbd "M-Z") 'zap-back-up-to-char)
  
    (define-key my-keymap "d" 'zap-up-to-char)
    (define-key my-keymap "D" 'zap-back-up-to-char)
  
    (global-set-key "\C-a" 'back-to-indentation))
#+END_SRC

** ido

#+BEGIN_SRC emacs-lisp
  (define-module ido
    "Enable ido globally, and use it everywhere"
    
    (custom-set-variables
     '(ido-enable-regexp nil)
     '(ido-enable-flex-matching t)
     '(ido-everywhere t)
     '(ido-read-file-name-as-directory-commands nil)
     '(ido-use-filename-at-point nil))
  
    (require-package 'ido-hacks)
    (require-package 'ido-complete-space-or-hyphen)
  
    (ido-mode +1)
    (ido-load-history)
  
    (ido-complete-space-or-hyphen-enable)
    (require 'ido-hacks)
    (ido-hacks-mode +1)
  
    (defun init--ido-setup ()
      (define-key ido-completion-map (kbd "M-m") 'ido-merge-work-directories)
      (define-key ido-completion-map "\C-c" 'ido-toggle-case))
  
    (add-hook 'ido-setup-hook 'init--ido-setup))
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
  (define-module magit
    "Git GUI for Emacs"
  
    (custom-set-variables
     '(magit-process-popup-time 60)
     '(magit-repo-dirs (list my-codebase-dir))
     '(magit-repo-dirs-depth 1))
  
    (require-package 'magit)
  
    (defun magit-toggle-whitespace ()
      (interactive)
      (if (member "-w" magit-diff-options)
          (magit-observe-whitespace)
        (magit-ignore-whitespace)))
  
    (defun magit-ignore-whitespace ()
      (interactive)
      (add-to-list 'magit-diff-options "-w")
      (magit-refresh))
  
    (defun magit-observe-whitespace ()
      (interactive)
      (setq magit-diff-options (remove "-w" magit-diff-options))
      (magit-refresh))
  
    (defun init--magit-mode ()
      (define-key magit-mode-map (kbd "W") 'magit-toggle-whitespace))
  
    (defun init--magit-log-edit-mode ()
      (flyspell-mode 1)
      (auto-fill-mode t)
      (setq fill-column 72))
  
    (add-hook 'magit-mode-hook 'init--magit-mode)
    (add-hook 'magit-log-edit-mode-hook 'init--magit-log-edit-mode)
  
    (global-set-key [f12] 'magit-status))
#+END_SRC
** org

Install latest org by running =make org=. Othewise system bundled version is used.

#+BEGIN_SRC emacs-lisp
  (define-module org
    "Basic orgmode setup"
  
    (custom-set-variables
     '(org-export-backends '(md html icalendar latex beamer)))
    
    (let ((org-load-path
           (car (nreverse (file-expand-wildcards (concat my-vendor-dir "org-*"))))))
      (when org-load-path
        ;; remove system org
        (setq load-path
              (--remove (string= "org" (file-name-nondirectory it)) load-path))
        (setq load-path (cons (concat org-load-path "/lisp") load-path))
        (or (require 'org-loaddefs nil t) (require 'org nil t)))))
#+END_SRC
